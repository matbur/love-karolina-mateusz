{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["moment","locale","App","state","now","_this2","this","t","setInterval","setState","clearInterval","today","clone","startOf","react_default","a","createElement","className","Card","Header","Body","CardDeck","App_Date","header","value","src","Footer","concat","format","Component","Date","beforeAfter","val","s","calculateDays","date","diffDays","diff","_this3","calculateWeeks","diffWeeks","Fragment","Math","abs","calculateMonths","diffMonths","dd","nd","endOf","_this$props","props","bg","style","minWidth","marginBottom","Img","variant","Title","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4c9870a5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Card, CardDeck } from 'react-bootstrap';\nimport moment from 'moment';\n// eslint-disable-next-line no-unused-vars\nimport * as pl from 'moment/locale/pl';\n\nmoment.locale('pl');\n\nconst format = 'ddd, D MMM Y';\n\nclass App extends Component {\n  state = {\n    now: moment()\n  };\n\n  componentDidMount() {\n    this.t = setInterval(() => {\n      this.setState({\n        now: moment()\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.t);\n  }\n\n  render() {\n    const { now } = this.state;\n    const today = now.clone().startOf('day');\n\n    return (\n      <div className=\"App\">\n        <Card>\n          <Card.Header className=\"text-center\">\n            {'\\u2619 Karolina i Mateusz \\u2767'}\n          </Card.Header>\n          <Card.Body>\n            <CardDeck>\n              <Date\n                header=\"Piersze spotkanie\"\n                value=\"2018-07-23\"\n                now={today}\n                src=\"kajaki.jpg\"\n              />\n              <Date\n                header=\"Początek związku\"\n                value=\"2018-09-14\"\n                now={today}\n                src=\"giewont.jpg\"\n              />\n              <Date\n                header=\"Vegas\"\n                value=\"2020-08-22\"\n                now={today}\n                src=\"vegas.jpg\"\n              />\n            </CardDeck>\n          </Card.Body>\n          <Card.Footer>\n            <small className=\"text-muted\">{`${now.format(\n              format + ' - HH:mm:ss'\n            )}`}</small>\n          </Card.Footer>\n        </Card>\n      </div>\n    );\n  }\n}\n\nclass Date extends Component {\n  beforeAfter = (val, s) => (val > 0 ? `za ${val} ${s}` : `${-val} ${s} temu`);\n\n  calculateDays = (date, now) => {\n    const diffDays = date.diff(now, 'days');\n\n    return (\n      <li>\n        {diffDays === 0 ? 'to już dzisiaj' : this.beforeAfter(diffDays, 'dni')}\n      </li>\n    );\n  };\n\n  calculateWeeks = (date, now) => {\n    const diff = date.diff(now, 'days');\n    const diffWeeks = (diff / 7) >> 0;\n    const diffDays = diff % 7;\n\n    return diffWeeks === 0 ? null : (\n      <li>\n        {this.beforeAfter(diffWeeks, 'tyg.')}\n        {diffDays === 0 ? null : (\n          <>\n            <br />\n            {`i ${Math.abs(diffDays)} dni`}\n          </>\n        )}\n      </li>\n    );\n  };\n\n  calculateMonths = (date, now) => {\n    const diffMonths = date.diff(now, 'months');\n    const diff = date.diff(now, 'days');\n    const dd = date.date();\n    const nd = now.date();\n\n    let diffDays = 0;\n\n    if (diff < 0) {\n      if (dd < nd) {\n        diffDays = dd - nd;\n      } else if (dd > nd) {\n        diffDays =\n          dd -\n          nd -\n          date\n            .clone()\n            .endOf('month')\n            .date();\n      }\n    } else if (diff > 0) {\n      if (dd < nd) {\n        diffDays =\n          dd -\n          nd +\n          now\n            .clone()\n            .endOf('month')\n            .date();\n      } else if (dd > nd) {\n        diffDays = dd - nd;\n      }\n    }\n\n    return diffMonths === 0 ? null : (\n      <li>\n        {this.beforeAfter(diffMonths, 'm-cy')}\n        {diffDays === 0 ? null : (\n          <>\n            <br />\n            {`i ${Math.abs(diffDays)} dni`}\n          </>\n        )}\n      </li>\n    );\n  };\n\n  render() {\n    const { header, src, now, value } = this.props;\n    const date = moment(value);\n    return (\n      <Card bg=\"light\" style={{ minWidth: '11.09rem', marginBottom: 10 }}>\n        <Card.Img variant=\"top\" src={src} />\n        <Card.Body>\n          <Card.Title>{header}</Card.Title>\n          <ul>\n            {this.calculateDays(date, now)}\n            {this.calculateWeeks(date, now)}\n            {this.calculateMonths(date, now)}\n          </ul>\n        </Card.Body>\n        <Card.Footer>\n          <small className=\"text-muted\">{`${date.format(format)}`}</small>\n        </Card.Footer>\n      </Card>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}