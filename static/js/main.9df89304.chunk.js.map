{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","t","clicked","n","state","isOpen","equals","setState","concat","toConsumableArray","takeLast","isHidden","now","moment","setInterval","clearInterval","_this$state","today","clone","startOf","react_default","a","createElement","className","Card","Header","Body","CardDeck","App_Date","header","value","src","handleClick","Footer","format","Component","Date","beforeAfter","val","s","calculateDays","date","diffDays","diff","_this2","calculateWeeks","diffWeeks","Fragment","Math","abs","calculateMonths","diffMonths","dd","nd","endOf","_this$props","bg","style","minWidth","marginBottom","onClick","Img","variant","Title","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9df89304.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Card, CardDeck } from 'react-bootstrap';\nimport moment from 'moment';\nimport { equals, takeLast } from 'ramda';\n\nconst format = 'ddd, D MMM Y';\n\n\ntype AppState = {\n  now: moment.Moment;\n  clicked: number[];\n  isHidden: boolean;\n}\nclass App extends Component<{}, AppState> {\n  t: NodeJS.Timeout;\n\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      now: moment(),\n      clicked: [],\n      isHidden: true,\n    };\n\n    this.t = setInterval(() => {\n      this.setState({\n        now: moment(),\n      });\n    }, 100);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.t);\n  }\n\n  clicked = (n: number) => () => {\n    const { clicked } = this.state\n    const isOpen = equals(clicked, [1, 1, 2, 1, 1, 1]) && n === 2\n\n    this.setState({\n      clicked: isOpen ? [] : [...takeLast(5, clicked), n],\n      isHidden: !isOpen,\n    })\n  }\n\n  render() {\n    const { now, isHidden } = this.state;\n    const today = now.clone().startOf('day');\n\n    return (\n      <div className=\"App\">\n        <Card>\n          <Card.Header className=\"text-center\">\n            {'\\u2619 Karolina i Mateusz \\u2767'}\n          </Card.Header>\n          <Card.Body>\n            <CardDeck>\n              <Date\n                header=\"Piersze spotkanie\"\n                value=\"2018-07-23\"\n                now={today}\n                src=\"kajaki.jpg\"\n                handleClick={this.clicked(1)}\n              />\n              <Date\n                header=\"Początek związku\"\n                value=\"2018-09-14\"\n                now={today}\n                src=\"giewont.jpg\"\n                handleClick={this.clicked(2)}\n              />\n              {\n                isHidden ? null :\n                  <Date\n                    header=\"Vegas\"\n                    value=\"2020-08-22\"\n                    now={today}\n                    src=\"vegas.jpg\"\n                    handleClick={this.clicked(3)}\n                  />\n              }\n            </CardDeck>\n          </Card.Body>\n          <Card.Footer>\n            <small className=\"text-muted\">{`${now.format(\n              format + ' - HH:mm:ss'\n            )}`}</small>\n          </Card.Footer>\n        </Card>\n      </div>\n    );\n  }\n}\n\n\ntype DateProps = {\n  header: string;\n  value: string;\n  now: moment.Moment;\n  src: string;\n  handleClick: () => void\n}\nclass Date extends Component<DateProps, {}> {\n  beforeAfter = (val: number, s: string) => (val > 0 ? `za ${val} ${s}` : `${-val} ${s} temu`);\n\n  calculateDays = (date: moment.Moment, now: moment.Moment) => {\n    const diffDays = date.diff(now, 'days');\n\n    return (\n      <li>\n        {diffDays === 0 ? 'to już dzisiaj' : this.beforeAfter(diffDays, 'dni')}\n      </li>\n    );\n  };\n\n  calculateWeeks = (date: moment.Moment, now: moment.Moment) => {\n    const diff = date.diff(now, 'days');\n    const diffWeeks = (diff / 7) >> 0;\n    const diffDays = diff % 7;\n\n    return diffWeeks === 0 ? null : (\n      <li>\n        {this.beforeAfter(diffWeeks, 'tyg.')}\n        {diffDays === 0 ? null : (\n          <>\n            <br />\n            {`i ${Math.abs(diffDays)} dni`}\n          </>\n        )}\n      </li>\n    );\n  };\n\n  calculateMonths = (date: moment.Moment, now: moment.Moment) => {\n    const diffMonths = date.diff(now, 'months');\n    const diff = date.diff(now, 'days');\n    const dd = date.date();\n    const nd = now.date();\n\n    let diffDays = 0;\n\n    if (diff < 0) {\n      if (dd < nd) {\n        diffDays = dd - nd;\n      } else if (dd > nd) {\n        diffDays = dd - nd - date.clone().endOf('month').date();\n      }\n    } else if (diff > 0) {\n      if (dd < nd) {\n        diffDays = dd - nd + now.clone().endOf('month').date();\n      } else if (dd > nd) {\n        diffDays = dd - nd;\n      }\n    }\n\n    return diffMonths === 0 ? null : (\n      <li>\n        {this.beforeAfter(diffMonths, 'm-cy')}\n        {diffDays === 0 ? null : (\n          <>\n            <br />\n            {`i ${Math.abs(diffDays)} dni`}\n          </>\n        )}\n      </li>\n    );\n  };\n\n  render() {\n    const { header, src, now, value, handleClick } = this.props;\n    const date = moment(value);\n\n    return (\n      <Card\n        bg=\"light\"\n        style={{ minWidth: '11.09rem', marginBottom: 10 }}\n        className={\"hidden\"}\n        onClick={handleClick}\n      >\n        <Card.Img variant=\"top\" src={src} />\n        <Card.Body>\n          <Card.Title>{header}</Card.Title>\n          <ul>\n            {this.calculateDays(date, now)}\n            {this.calculateWeeks(date, now)}\n            {this.calculateMonths(date, now)}\n          </ul>\n        </Card.Body>\n        <Card.Footer>\n          <small className=\"text-muted\">{`${date.format(format)}`}</small>\n        </Card.Footer>\n      </Card>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}