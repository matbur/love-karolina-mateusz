{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["moment","locale","App","state","now","_this2","this","t","setInterval","setState","clearInterval","react_default","a","createElement","className","Card","Header","Body","CardDeck","App_Date","header","value","src","Footer","concat","format","Component","Date","beforeAfter","val","s","_this$props","props","date","bg","style","minWidth","marginBottom","Img","variant","Title","diff","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRAMAA,IAAOC,OAAO,MAEd,IAEMC,6MACJC,MAAQ,CACNC,IAAKJ,0FAGa,IAAAK,EAAAC,KAClBA,KAAKC,EAAIC,YAAY,WACnBH,EAAKI,SAAS,CACZL,IAAKJ,yDAMTU,cAAcJ,KAAKC,oCAGZ,IACCH,EAAQE,KAAKH,MAAbC,IAER,OACEO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,EAAKC,OAAN,CAAaF,UAAU,eACpB,oCAEHH,EAAAC,EAAAC,cAACE,EAAA,EAAKE,KAAN,KACEN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACM,EAAD,CACEC,OAAO,oBACPC,MAAM,aACNjB,IAAKA,EACLkB,IAAI,eAENX,EAAAC,EAAAC,cAACM,EAAD,CACEC,OAAO,6BACPC,MAAM,aACNjB,IAAKA,EACLkB,IAAI,gBAENX,EAAAC,EAAAC,cAACM,EAAD,CACEC,OAAO,QACPC,MAAM,aACNjB,IAAKA,EACLkB,IAAI,gBAIVX,EAAAC,EAAAC,cAACE,EAAA,EAAKQ,OAAN,KACEZ,EAAAC,EAAAC,cAAA,SAAOC,UAAU,cAAjB,GAAAU,OAAkCpB,EAAIqB,OACpCA,uCAlDIC,aA2DZC,6MACJC,YAAc,SAACC,EAAKC,GAAN,OAAaD,EAAM,EAAN,MAAAL,OAAgBK,EAAhB,KAAAL,OAAuBM,GAAvB,GAAAN,QAAiCK,EAAjC,KAAAL,OAAwCM,EAAxC,kFAElB,IAAAC,EAC6BzB,KAAK0B,MAAjCZ,EADDW,EACCX,OAAQE,EADTS,EACST,IAAKlB,EADd2B,EACc3B,IAAKiB,EADnBU,EACmBV,MACpBY,EAAOjC,IAAOqB,GACpB,OACEV,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMmB,GAAG,QAAQC,MAAO,CAAEC,SAAU,WAAYC,aAAc,KAC5D1B,EAAAC,EAAAC,cAACE,EAAA,EAAKuB,IAAN,CAAUC,QAAQ,MAAMjB,IAAKA,IAC7BX,EAAAC,EAAAC,cAACE,EAAA,EAAKE,KAAN,KACEN,EAAAC,EAAAC,cAACE,EAAA,EAAKyB,MAAN,KAAapB,GACbT,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,aAAAW,OAAQlB,KAAKsB,YAAYK,EAAKQ,KAAKrC,EAAK,QAAS,SACjDO,EAAAC,EAAAC,cAAA,aAAAW,OAAQlB,KAAKsB,YACXK,EAAKQ,KAAKrC,EAAK,SACf,UAEFO,EAAAC,EAAAC,cAAA,aAAAW,OAAQlB,KAAKsB,YACXK,EAAKQ,KAAKrC,EAAK,UACf,YAINO,EAAAC,EAAAC,cAACE,EAAA,EAAKQ,OAAN,KACEZ,EAAAC,EAAAC,cAAA,SAAOC,UAAU,cAAjB,GAAAU,OAAkCS,EAAKR,OArFlC,2BA6DIC,aA8BJxB,ICvFKwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.de8909f5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Card, CardDeck } from 'react-bootstrap';\nimport moment from 'moment';\n// eslint-disable-next-line no-unused-vars\nimport * as pl from 'moment/locale/pl';\n\nmoment.locale('pl');\n\nconst format = 'ddd, D MMM Y';\n\nclass App extends Component {\n  state = {\n    now: moment()\n  };\n\n  componentDidMount() {\n    this.t = setInterval(() => {\n      this.setState({\n        now: moment()\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.t);\n  }\n\n  render() {\n    const { now } = this.state;\n\n    return (\n      <div className=\"App\">\n        <Card>\n          <Card.Header className=\"text-center\">\n            {'\\u2619 Karolina i Mateusz \\u2767'}\n          </Card.Header>\n          <Card.Body>\n            <CardDeck>\n              <Date\n                header=\"Piersze spotkanie\"\n                value=\"2018-07-23\"\n                now={now}\n                src=\"kajaki.jpg\"\n              />\n              <Date\n                header=\"Początek związku\"\n                value=\"2018-09-14\"\n                now={now}\n                src=\"giewont.jpg\"\n              />\n              <Date\n                header=\"Vegas\"\n                value=\"2020-08-22\"\n                now={now}\n                src=\"vegas.jpg\"\n              />\n            </CardDeck>\n          </Card.Body>\n          <Card.Footer>\n            <small className=\"text-muted\">{`${now.format(\n              format + ' - HH:mm:ss'\n            )}`}</small>\n          </Card.Footer>\n        </Card>\n      </div>\n    );\n  }\n}\n\nclass Date extends Component {\n  beforeAfter = (val, s) => (val > 0 ? `za ${val} ${s}` : `${-val} ${s} temu`);\n\n  render() {\n    const { header, src, now, value } = this.props;\n    const date = moment(value);\n    return (\n      <Card bg=\"light\" style={{ minWidth: '11.09rem', marginBottom: 10 }}>\n        <Card.Img variant=\"top\" src={src} />\n        <Card.Body>\n          <Card.Title>{header}</Card.Title>\n          <ul>\n            <li>{`${this.beforeAfter(date.diff(now, 'days'), 'dni')}`}</li>\n            <li>{`${this.beforeAfter(\n              date.diff(now, 'weeks'),\n              'tyg.'\n            )}`}</li>\n            <li>{`${this.beforeAfter(\n              date.diff(now, 'months'),\n              'm-cy'\n            )}`}</li>\n          </ul>\n        </Card.Body>\n        <Card.Footer>\n          <small className=\"text-muted\">{`${date.format(format)}`}</small>\n        </Card.Footer>\n      </Card>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}