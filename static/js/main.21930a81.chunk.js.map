{"version":3,"sources":["components/Event.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["dateOptions","addSuffix","locale","pl","Event","header","value","src","Card","bg","style","minWidth","marginBottom","Img","variant","Body","Title","formatDistanceToNowStrict","unit","Footer","className","format","App","state","now","Date","setInterval","setState","Header","CardDeck","parse","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0UAwCMA,EAAc,CAClBC,WAAW,EACXC,OAAQC,KAGKC,EAlCqB,SAAC,GAAD,IAClCC,EADkC,EAClCA,OACAC,EAFkC,EAElCA,MACAC,EAHkC,EAGlCA,IAHkC,OAKlC,kBAACC,EAAA,EAAD,CAAMC,GAAG,QAAQC,MAAO,CAAEC,SAAU,WAAYC,aAAc,KAC5D,kBAACJ,EAAA,EAAKK,IAAN,CAAUC,QAAQ,MAAMP,IAAKA,IAC7B,kBAACC,EAAA,EAAKO,KAAN,KACE,kBAACP,EAAA,EAAKQ,MAAN,KAAaX,GACb,4BACE,4BACGY,YAA0BX,EAAD,eAAaN,EAAb,CAA0BkB,KAAM,UAE5D,4BACGD,YAA0BX,EAAD,eAAaN,EAAb,CAA0BkB,KAAM,YAE5D,4BACGD,YAA0BX,EAAD,eAAaN,EAAb,CAA0BkB,KAAM,aAIhE,kBAACV,EAAA,EAAKW,OAAN,KACE,2BAAOC,UAAU,cACdC,YAAOf,EAAO,eAAgB,CAAEJ,OAAQC,MAAO,QC6BzCmB,E,2MApDNC,MAAQ,CACbC,IAAK,IAAIC,M,mFAGuB,IAAD,OAC/BC,aAAY,WACV,EAAKC,SAAS,CACZH,IAAK,IAAIC,SAEV,O,+BAIH,OACE,kBAACjB,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKoB,OAAN,CAAaR,UAAU,eACpB,oCAEH,kBAACZ,EAAA,EAAKO,KAAN,KACE,kBAACc,EAAA,EAAD,KACE,kBAAC,EAAD,CACExB,OAAO,oBACPC,MAAO,IAAImB,KAAKA,KAAKK,MAAM,eAC3BvB,IAAI,eAEN,kBAAC,EAAD,CACEF,OAAO,6BACPC,MAAO,IAAImB,KAAKA,KAAKK,MAAM,eAC3BvB,IAAI,gBAEN,kBAAC,EAAD,CACEF,OAAO,iBACPC,MAAO,IAAImB,KAAKA,KAAKK,MAAM,eAC3BvB,IAAI,kBAEN,kBAAC,EAAD,CACEF,OAAO,QACPC,MAAO,IAAImB,KAAKA,KAAKK,MAAM,eAC3BvB,IAAI,gBAIV,kBAACC,EAAA,EAAKW,OAAN,KACE,2BAAOC,UAAU,cACdC,YAAOU,KAAKR,MAAMC,IAAK,0BAA2B,CAAEtB,OAAQC,a,GA7CvD6B,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.21930a81.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { format, formatDistanceToNowStrict } from \"date-fns\";\nimport { pl } from \"date-fns/locale\";\n\ninterface EventProps {\n  header: string;\n  value: Date;\n  src: string;\n}\n\nconst Event: React.FC<EventProps> = ({\n  header,\n  value,\n  src\n}): React.ReactElement => (\n  <Card bg=\"light\" style={{ minWidth: \"11.09rem\", marginBottom: 10 }}>\n    <Card.Img variant=\"top\" src={src} />\n    <Card.Body>\n      <Card.Title>{header}</Card.Title>\n      <ul>\n        <li>\n          {formatDistanceToNowStrict(value, { ...dateOptions, unit: \"day\" })}\n        </li>\n        <li>\n          {formatDistanceToNowStrict(value, { ...dateOptions, unit: \"month\" })}\n        </li>\n        <li>\n          {formatDistanceToNowStrict(value, { ...dateOptions, unit: \"year\" })}\n        </li>\n      </ul>\n    </Card.Body>\n    <Card.Footer>\n      <small className=\"text-muted\">\n        {format(value, \"ccc, d LLL y\", { locale: pl })}{\" \"}\n      </small>\n    </Card.Footer>\n  </Card>\n);\n\nconst dateOptions = {\n  addSuffix: true,\n  locale: pl\n};\n\nexport default Event;\n","import { Card, CardDeck } from \"react-bootstrap\";\nimport React, { Component, ReactElement } from \"react\";\nimport { pl } from \"date-fns/locale\";\n\nimport Event from \"./components/Event\";\nimport { format } from \"date-fns\";\n\ninterface AppState {\n  now: Date;\n}\nclass App extends Component<{}, AppState> {\n  public state = {\n    now: new Date()\n  };\n\n  public componentDidMount(): void {\n    setInterval((): void => {\n      this.setState({\n        now: new Date()\n      });\n    }, 100);\n  }\n\n  public render(): ReactElement {\n    return (\n      <Card>\n        <Card.Header className=\"text-center\">\n          {\"\\u2619 Karolina i Mateusz \\u2767\"}\n        </Card.Header>\n        <Card.Body>\n          <CardDeck>\n            <Event\n              header=\"Piersze spotkanie\"\n              value={new Date(Date.parse(\"2018-07-23\"))}\n              src=\"kajaki.jpg\"\n            />\n            <Event\n              header=\"Początek związku\"\n              value={new Date(Date.parse(\"2018-09-14\"))}\n              src=\"giewont.jpg\"\n            />\n            <Event\n              header=\"Zaręczyny\"\n              value={new Date(Date.parse(\"2019-08-02\"))}\n              src=\"trzebnica.jpg\"\n            />\n            <Event\n              header=\"Vegas\"\n              value={new Date(Date.parse(\"2020-08-14\"))}\n              src=\"vegas.jpg\"\n            />\n          </CardDeck>\n        </Card.Body>\n        <Card.Footer>\n          <small className=\"text-muted\">\n            {format(this.state.now, \"ccc, d LLL y - HH:mm:ss\", { locale: pl })}\n          </small>\n        </Card.Footer>\n      </Card>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}